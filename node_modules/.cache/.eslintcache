[{"C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\index.js":"1","C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\reportWebVitals.js":"2","C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\App.js":"3","C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\components\\Navbar.js":"4","C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\components\\TextForm.js":"5","C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\components\\About.js":"6","C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\components\\Alert.js":"7"},{"size":535,"mtime":1656400955650,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1656400955870,"results":"10","hashOfConfig":"9"},{"size":2408,"mtime":1657099520369,"results":"11","hashOfConfig":"9"},{"size":2030,"mtime":1657099656305,"results":"12","hashOfConfig":"9"},{"size":3484,"mtime":1656685267691,"results":"13","hashOfConfig":"9"},{"size":5460,"mtime":1656590252620,"results":"14","hashOfConfig":"9"},{"size":553,"mtime":1656685423977,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1thhkho",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\index.js",[],[],[],"C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\reportWebVitals.js",[],[],"C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\App.js",["39"],[],"C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\components\\Navbar.js",["40","41"],[],"C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\components\\TextForm.js",["42"],[],"import React,{useState} from \"react\";\r\n\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    \r\n    const handleUpClick=()=>{\r\n    \r\n        console.log(\"Uppercase was clicked\" + text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Coverted to uppercase!\",\"success \");\r\n        \r\n\r\n    }\r\n    const handleLpClick=()=>{\r\n    \r\n        console.log(\"Lowercase was clicked\" + text);\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Coverted to lowercase!\",\"success \");\r\n        \r\n\r\n    }\r\n    const handleClearText=()=>{\r\n    \r\n      console.log(\"cleartext was clicked\" + text);\r\n      let newText=(\"\");\r\n      setText(newText);\r\n      props.showAlert(\"Text Cleared\",\"success \");\r\n\r\n      \r\n\r\n  }\r\n  const handleCapitalize=()=>{\r\n    \r\n    console.log(\"capitalize was clicked\" + text);\r\n    let newText=text.charAt(0).toUpperCase()+text.slice(1);\r\n    setText(newText);\r\n    props.showAlert(\"Text Capitalized!\",\"success \");\r\n\r\n    \r\n\r\n}\r\nconst copyToClipboard=()=>{\r\n    \r\n  console.log(\"copy to clipboard was clicked\" + text);\r\n  let newText;\r\n  // alert(\"copied\");\r\n  \r\n\r\n\r\n  \r\n  \r\n  if (text.length!==0){\r\n    props.showAlert(\"copied\",\"success \");\r\n    //alert(\"copied\");\r\n    newText=navigator.clipboard.writeText(text);\r\n  }\r\n  else{\r\n    props.showAlert(\"Nothing to copy\",\"warning \");\r\n    //alert(\"nothing to copy\");\r\n    \r\n  }\r\n  \r\n\r\n  }\r\n  const removeExtraSpaces=()=>{\r\n    \r\n    console.log(\"remove extra spaces was clicked\" + text);\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Spaces Removed\",\"success \");\r\n    \r\n  \r\n    }\r\n  //setText(newText);\r\n  \r\n\r\n\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const[text,setText]=useState(\"\");\r\n    // text=\"new text\"//wrong way to change the state\r\n    // setText=(\"new text\")//correct way to change the state\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        \r\n\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary mx-2\"  onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button className=\"btn btn-success mx-2\"  onClick={handleLpClick}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-danger mx-2\"  onClick={handleClearText}>Clear Text</button>\r\n      <button className=\"btn btn-info mx-2\"  onClick={handleCapitalize}>Captitalize Text</button>\r\n      <button className=\"btn btn-dark mx-2\"  onClick={copyToClipboard}>Copy to Clipboard</button>\r\n      <button className=\"btn btn-secondary mx-2\"  onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n      \r\n\r\n    \r\n    </div>\r\n    <div className=\"container my-2\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>Your text summary</h1>\r\n      <p>{text.split(\" \").length} and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").length} Minutes reading time </p>\r\n      <p>{text.split(\"\\n\").length} Lines</p>\r\n      <h3>Preview</h3>\r\n      <p>{text.length>0?text:\"Enter something in textbox to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\components\\About.js",[],[],"C:\\Users\\praspatil\\Desktop\\React Tutorial Training\\textutils\\src\\components\\Alert.js",[],[],{"ruleId":"43","severity":1,"message":"44","line":43,"column":12,"nodeType":"45","messageId":"46","endLine":43,"endColumn":14},{"ruleId":"47","severity":1,"message":"48","line":11,"column":7,"nodeType":"49","endLine":11,"endColumn":44},{"ruleId":"47","severity":1,"message":"48","line":19,"column":13,"nodeType":"49","endLine":19,"endColumn":73},{"ruleId":"50","severity":1,"message":"51","line":58,"column":5,"nodeType":"52","messageId":"53","endLine":58,"endColumn":12},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'newText' is assigned a value but never used.","Identifier","unusedVar"]